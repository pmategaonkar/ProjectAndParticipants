{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/addcontacttoproject/addcontacttoproject.component.css","webpack:///./src/app/addcontacttoproject/addcontacttoproject.component.html","webpack:///./src/app/addcontacttoproject/addcontacttoproject.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/contactadd/contactadd.component.css","webpack:///./src/app/contactadd/contactadd.component.html","webpack:///./src/app/contactadd/contactadd.component.ts","webpack:///./src/app/contactlist/contactlist.component.css","webpack:///./src/app/contactlist/contactlist.component.html","webpack:///./src/app/contactlist/contactlist.component.ts","webpack:///./src/app/models/Contact.ts","webpack:///./src/app/models/Project.ts","webpack:///./src/app/projectadd/projectadd.component.css","webpack:///./src/app/projectadd/projectadd.component.html","webpack:///./src/app/projectadd/projectadd.component.ts","webpack:///./src/app/projectlist/projectlist.component.css","webpack:///./src/app/projectlist/projectlist.component.html","webpack:///./src/app/projectlist/projectlist.component.ts","webpack:///./src/app/services/contact.service.ts","webpack:///./src/app/services/project.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<h1 mat-dialog-title>Add contact to project</h1>\\r\\n<form [formGroup]=\\\"addContactToProjectForm\\\">\\r\\n  <div mat-dialog-content>\\r\\n\\r\\n    <mat-form-field style=\\\"width:90%\\\">\\r\\n      <input matInput readonly formControlName=\\\"projectName\\\">\\r\\n    </mat-form-field>\\r\\n\\r\\n    <mat-form-field>\\r\\n      <mat-select placeholder=\\\"Select contact\\\" formControlName=\\\"selectedContact\\\" name=\\\"selectedContact\\\">\\r\\n        <mat-option *ngFor=\\\"let eachContact of contacts\\\" [value]=\\\"eachContact.id\\\">\\r\\n          {{eachContact.firstName}}-{{eachContact.lastName}}\\r\\n        </mat-option>\\r\\n      </mat-select>\\r\\n    </mat-form-field>\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\" style=\\\"text-align:right\\\">\\r\\n      <div mat-dialog-actions style=\\\"width:90%\\\">\\r\\n        <button mat-button (click)=\\\"onCancelClick()\\\">Cancel</button>\\r\\n        <button mat-button (click)=\\\"onSaveClick()\\\" cdkFocusInitial>Save</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</form>\\r\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ContactService } from 'src/app/services/contact.service';\r\nimport { Contact } from 'src/app/models/Contact';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Inject } from '@angular/core';\r\nimport { Project } from 'src/app/models/Project';\r\nimport { ProjectService } from 'src/app/services/project.service';\r\n\r\n@Component({\r\n  selector: 'app-addcontacttoproject',\r\n  templateUrl: './addcontacttoproject.component.html',\r\n  styleUrls: ['./addcontacttoproject.component.css']\r\n})\r\nexport class AddcontacttoprojectComponent implements OnInit {\r\n\r\n  public contacts: Array<Contact>;\r\n  public project: Project;\r\n  public addContactToProjectForm: FormGroup;\r\n  public selectedContact: Contact;\r\n\r\n  @Output()\n  public newProjectContactCreated = new EventEmitter();\r\n\r\n  constructor(private dialogRef: MatDialogRef<AddcontacttoprojectComponent>,\r\n    private _contactService: ContactService,\r\n    private _projectService: ProjectService,\r\n    private _fb: FormBuilder,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.contacts = new Array<Contact>();\r\n    this.project = data.project;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createForm();\r\n    this.loadContacts();\r\n  }\r\n\r\n  get f() { return this.addContactToProjectForm; }\r\n\r\n  public onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onSaveClick(): void {\r\n    if (this.addContactToProjectForm.controls.selectedContact.value != null) {\r\n      this._projectService.assignContactToProject(this.project.id, this.addContactToProjectForm.controls.selectedContact.value).subscribe(assignContactToProjectResponse => {\r\n        this.newProjectContactCreated.emit();\r\n        this.dialogRef.close();\r\n      });\r\n    }\r\n  }\r\n\r\n  private createForm(): any {\r\n    this.addContactToProjectForm = this._fb.group({\r\n      selectedContact: [''],\r\n      projectName: this.project.name\r\n    });\r\n  }\r\n  \r\n  private loadContacts(): void {\r\n    this._contactService.getContacts().subscribe(contactsResponse => {\r\n      if (contactsResponse != undefined) {\r\n        this.contacts = contactsResponse;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ProjectlistComponent } from 'src/app/projectlist/projectlist.component';\r\nimport { ContactlistComponent } from 'src/app/contactlist/contactlist.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/projects', pathMatch: 'full' },\r\n  { path: 'projects', component: ProjectlistComponent },\r\n  { path: 'contacts', component: ContactlistComponent },\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n  <ul class=\\\"nav\\\">\\r\\n    <li class=\\\"nav-item\\\">\\r\\n      <a class=\\\"nav-link\\\" routerLink=\\\"/projects\\\">Projects</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\">\\r\\n      <a class=\\\"nav-link\\\" routerLink=\\\"/contacts\\\">Contacts</a>\\r\\n    </li>\\r\\n  </ul>\\r\\n\\r\\n  <div style=\\\"margin-top:50px\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { AppComponent } from './app.component';\r\nimport { ProjectlistComponent } from './projectlist/projectlist.component';\r\nimport { ProjectService } from './services/project.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ProjectaddComponent } from './projectadd/projectadd.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatBottomSheetModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatStepperModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatTreeModule,\r\n} from '@angular/material';\r\nimport { AppRoutingModule } from 'src/app/app-routing.module';\r\nimport { ContactlistComponent } from './contactlist/contactlist.component';\r\nimport { ContactService } from 'src/app/services/contact.service';\r\nimport { ContactaddComponent } from './contactadd/contactadd.component';\r\nimport { AddcontacttoprojectComponent } from './addcontacttoproject/addcontacttoproject.component';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CdkTableModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  ],\r\n  declarations: []\r\n})\r\nexport class DemoMaterialModule { }\r\n\r\n@NgModule({\r\n  imports: [BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    DemoMaterialModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule ],\r\n  declarations: [AppComponent,\r\n    ProjectlistComponent,\r\n    ProjectaddComponent,\r\n    ContactlistComponent,\r\n    ContactaddComponent,\r\n    AddcontacttoprojectComponent],\r\n  bootstrap: [AppComponent],\r\n  providers: [ProjectService, ContactService],\r\n  entryComponents: [ProjectaddComponent, ContactaddComponent, AddcontacttoprojectComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \".invalid-feedback {\\r\\n  display:block;\\r\\n}\\r\\n\"","module.exports = \"<h1 mat-dialog-title>Create contact</h1>\\r\\n<form [formGroup]=\\\"contactForm\\\">\\r\\n  <div mat-dialog-content>\\r\\n    <mat-form-field style=\\\"width:90%\\\">\\r\\n      <input matInput formControlName=\\\"firstName\\\" placeholder=\\\"Enter first name\\\">\\r\\n    </mat-form-field>\\r\\n    <div *ngIf=\\\"submitted &&\\r\\n                f.controls.firstName.errors != null &&\\r\\n                f.controls.firstName.errors.required == true\\\">\\r\\n      <div class=\\\"invalid-feedback\\\">\\r\\n        First Name is required\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-form-field style=\\\"width:90%\\\">\\r\\n      <input matInput formControlName=\\\"lastName\\\" placeholder=\\\"Enter last name\\\">\\r\\n    </mat-form-field>\\r\\n    <div *ngIf=\\\"submitted &&\\r\\n                f.controls.lastName.errors != null &&\\r\\n                f.controls.lastName.errors.required == true\\\">\\r\\n      <div class=\\\"invalid-feedback\\\">\\r\\n        Last Name is required\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-form-field style=\\\"width:90%\\\">\\r\\n      <input matInput formControlName=\\\"email\\\" placeholder=\\\"Enter email\\\">\\r\\n    </mat-form-field>\\r\\n\\r\\n    <div *ngIf=\\\"submitted && f.controls.email.errors != null\\\">\\r\\n      <div class=\\\"invalid-feedback\\\" *ngIf=\\\"f.controls.email.errors.required\\\">\\r\\n        Email is required\\r\\n      </div>\\r\\n      <div class=\\\"invalid-feedback\\\" *ngIf=\\\"f.controls.email.errors.email\\\">\\r\\n        Invalid email format\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-form-field style=\\\"width:90%\\\">\\r\\n      <textarea rows=\\\"3\\\" matInput formControlName=\\\"address\\\" placeholder=\\\"Enter address\\\"></textarea>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\" style=\\\"text-align:right\\\">\\r\\n      <div mat-dialog-actions style=\\\"width:90%\\\">\\r\\n        <button mat-button (click)=\\\"onCancelClick()\\\">Cancel</button>\\r\\n        <button mat-button (click)=\\\"onSaveClick()\\\" cdkFocusInitial>Save</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  \\r\\n</form>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ContactService } from 'src/app/services/contact.service';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Validators } from '@angular/forms';\r\nimport { Contact } from 'src/app/models/Contact';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contactadd',\r\n  templateUrl: './contactadd.component.html',\r\n  styleUrls: ['./contactadd.component.css']\r\n})\r\nexport class ContactaddComponent implements OnInit {\r\n\r\n  public contactForm: FormGroup;\r\n  public submitted: boolean = false;\r\n\r\n  @Output()\r\n  public newContactCreated = new EventEmitter<Contact>();\r\n\r\n  constructor(private _contactService: ContactService,\r\n    public dialogRef: MatDialogRef<ContactaddComponent>,\r\n    private _fb: FormBuilder) {\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.submitted = false;\r\n  }\r\n\r\n  get f() { return this.contactForm; }\r\n\r\n  private createForm(): any {\r\n    this.contactForm = this._fb.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      address: [''],\r\n      email: ['', [Validators.required, Validators.email]]\r\n    });\r\n  }\r\n\r\n  public onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onSaveClick(): void {\r\n    this.submitted = true;\r\n\r\n    if (this.contactForm.invalid == true) {\r\n      return;\r\n    }\r\n\r\n    const newContact: Contact = new Contact();\r\n    newContact.address = this.contactForm.controls[\"address\"].value;\r\n    newContact.firstName = this.contactForm.controls[\"firstName\"].value;\r\n    newContact.lastName = this.contactForm.controls[\"lastName\"].value;\r\n    newContact.email = this.contactForm.controls[\"email\"].value;\r\n\r\n    this.\r\n      _contactService.\r\n      create(newContact).\r\n      subscribe(newContact => {\r\n        this.newContactCreated.emit(newContact);\r\n        this.dialogRef.close();\r\n    });\r\n\r\n  }\r\n}\r\n","module.exports = \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<table mat-table [dataSource]=\\\"tableDs\\\" class=\\\"mat-elevation-z8\\\">\\r\\n  <!-- Id Column -->\\r\\n  <ng-container matColumnDef=\\\"id\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Id </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\r\\n  </ng-container>\\r\\n  <!-- Name Column -->\\r\\n  <ng-container matColumnDef=\\\"firstName\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> First name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.firstName}} </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"lastName\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Last name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastName}} </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"email\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Email </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"address\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Address </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\r\\n  </ng-container>\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<div class=\\\"row\\\" style=\\\"margin-top:15px;\\\">\\r\\n  <div class=\\\"col-md-12\\\" style=\\\"text-align:right\\\">\\r\\n    <button mat-fab color=\\\"primary\\\" style=\\\"font-size:30px\\\" (click)=\\\"openCreateContact()\\\" title=\\\"Add new contact\\\">+</button>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ContactService } from 'src/app/services/contact.service';\r\nimport { MatDialog, MatTableDataSource } from '@angular/material';\r\nimport { Contact } from 'src/app/models/Contact';\r\nimport { ContactaddComponent } from '../contactadd/contactadd.component';\r\n\r\n@Component({\r\n  selector: 'app-contactlist',\r\n  templateUrl: './contactlist.component.html',\r\n  styleUrls: ['./contactlist.component.css']\r\n})\r\nexport class ContactlistComponent implements OnInit {\r\n\r\n  constructor(private _contactService: ContactService,\r\n    public _dialog: MatDialog) { }\r\n\r\n  public tableDs: MatTableDataSource<Contact>;\r\n  public displayedColumns = ['id', 'firstName', 'lastName', 'email', 'address'];\r\n\r\n  ngOnInit() {\r\n    this.tableDs = new MatTableDataSource<Contact>();\r\n    this.loadData();\r\n  }\r\n\r\n  public openCreateContact(): void {\r\n\r\n    const dialogRef =\r\n      this._dialog.open(ContactaddComponent, {\r\n        width: '600px',\r\n        height: '450px'\r\n      });\r\n\r\n    const addContactComponent = dialogRef.componentInstance as ContactaddComponent;\r\n    addContactComponent.newContactCreated.subscribe((newContact) => {\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  private loadData(): void {\r\n    this._contactService.getContacts().subscribe(contacts => {\r\n      this.tableDs.data = contacts;\r\n    });\r\n  }\r\n\r\n}\r\n","\r\nexport class Contact {\r\n\r\n  id: number;\r\n\r\n  firstName: string;\r\n\r\n  lastName: string;\r\n\r\n  address: string;\r\n\r\n  email: string;\r\n\r\n}\r\n","import { Contact } from './Contact';\r\n\r\n\r\nexport class Project {\r\n  id: number;\r\n\r\n  name: string;\r\n\r\n  contacts: Array<Contact>;\r\n}\r\n","module.exports = \"\"","module.exports = \"<h1 mat-dialog-title>Create project</h1>\\r\\n<div mat-dialog-content>\\r\\n\\t<p>Enter the name of project</p>\\r\\n\\t<mat-form-field style=\\\"width:90%\\\">\\r\\n\\t\\t<input matInput [(ngModel)]=\\\"name\\\">\\r\\n\\t</mat-form-field>\\r\\n</div>\\r\\n<div mat-dialog-actions style=\\\"width:90%\\\" class=\\\"pull-right\\\">\\r\\n\\t<button mat-button (click)=\\\"onCancelClick()\\\">Cancel</button>\\r\\n\\t<button mat-button [mat-dialog-close]=\\\"name\\\" (click)=\\\"onSaveClick()\\\" cdkFocusInitial>Save</button>\\r\\n</div>\"","import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ProjectService } from '../services/project.service';\r\nimport { Project } from '../models/Project';\r\n\r\n@Component({\r\n  selector: 'app-projectadd',\r\n  templateUrl: './projectadd.component.html',\r\n  styleUrls: ['./projectadd.component.css']\r\n})\r\nexport class ProjectaddComponent implements OnInit {\r\n\r\n  public name: string;\r\n\r\n  @Output()\r\n  public newProjectCreated = new EventEmitter<Project>();\r\n\r\n  constructor(public dialogRef: MatDialogRef<ProjectaddComponent>,\r\n    private _projectService: ProjectService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onSaveClick(): void {\r\n    if (this.name) {\r\n      this._projectService.create(this.name).subscribe((newProject) => {\r\n        this.newProjectCreated.emit(newProject);\r\n      });\r\n\r\n    }\r\n  }\r\n}","module.exports = \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<table mat-table [dataSource]=\\\"tableDs\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <!-- Id Column -->\\r\\n  <ng-container matColumnDef=\\\"id\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Id </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Name Column -->\\r\\n  <ng-container matColumnDef=\\\"name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"contacts\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> contacts </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <ul *ngFor=\\\"let eachContact of element.contacts\\\">\\r\\n        <li>{{eachContact.firstName}}-{{eachContact.lastName}}</li>\\r\\n      </ul>\\r\\n    </td> \\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"actions\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Action </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-button color=\\\"primary\\\" (click)=\\\"onAddContactToProjectClick(element)\\\">Add contact</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\\r\\n<div class=\\\"row\\\" style=\\\"margin-top:15px;\\\">\\r\\n  <div class=\\\"col-md-12\\\" style=\\\"text-align:right\\\">\\r\\n    <button mat-fab color=\\\"primary\\\" style=\\\"font-size:30px\\\" (click)=\\\"openCreateProject()\\\" title=\\\"Add new project\\\">+</button>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, NgZone, ChangeDetectorRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ProjectService } from '../services/project.service';\r\nimport { ProjectaddComponent } from '../projectadd/projectadd.component';\r\nimport { Project } from '../models/Project';\r\nimport { Contact } from '../models/Contact';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AddcontacttoprojectComponent } from 'src/app/addcontacttoproject/addcontacttoproject.component';\r\n\r\n@Component({\r\n  selector: 'app-projectlist',\r\n  templateUrl: './projectlist.component.html',\r\n  styleUrls: ['./projectlist.component.css']\r\n})\r\nexport class ProjectlistComponent implements OnInit {\r\n\r\n  constructor(private _projectService: ProjectService,\r\n    public _dialog: MatDialog) { }\r\n\r\n  public tableDs: MatTableDataSource<Project>;\r\n  public displayedColumns = ['id', 'name', 'contacts', 'actions'];\r\n\r\n  ngOnInit() {\r\n    this.tableDs = new MatTableDataSource<Project>();\r\n    this.loadData();\r\n  }\r\n\r\n  public openCreateProject(): void {\r\n    const dialogRef =\r\n      this._dialog.open(ProjectaddComponent, {\r\n        width: '400px',\r\n        height: '250px'\r\n      });\r\n\r\n    const addProjectComponent = dialogRef.componentInstance as ProjectaddComponent;\r\n    addProjectComponent.newProjectCreated.subscribe((newProject) => {\r\n      this.loadData();\r\n    }); \r\n  }\r\n\r\n  public onAddContactToProjectClick(project: Project): void {\r\n    const dialogRef =\r\n      this._dialog.open(AddcontacttoprojectComponent, {\r\n        width: '450px',\r\n        height: '300px',\r\n        data: {\r\n          project: project\r\n        }\r\n      });\r\n\r\n    const addContactToProjComponent = dialogRef.componentInstance as AddcontacttoprojectComponent;\r\n    addContactToProjComponent.newProjectContactCreated.subscribe(() => {\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  private loadData(): void {\r\n    this._projectService.getProjects().subscribe(projects => {\r\n      this.tableDs.data = projects;\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Project } from '../models/Project';\r\nimport { Contact } from '../models/Contact';\r\n\r\n@Injectable()\r\nexport class ContactService {\r\n\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getContacts(): Observable<Array<Contact>> {\r\n    return this._http.get<Array<Contact>>(\"/api/contacts\");\r\n    \r\n  }\r\n\r\n  create(contact: Contact): Observable<Contact> {\r\n    return this._http.post<Contact>(\"/api/contacts\", contact);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Project } from '../models/Project';\r\nimport { Contact } from '../models/Contact';\r\n\r\n@Injectable()\r\nexport class ProjectService {\r\n\r\n  constructor(private _http: HttpClient) {\r\n   \r\n  }\r\n\r\n  getProjects(): Observable<Array<Project>> {\r\n    return this._http.get<Array<Project>>(\"/api/Projects\");\r\n  }\r\n\r\n  create(name: string): Observable<Project> {\r\n    var newProject: Project = new Project();\r\n    newProject.name = name;\r\n    return this._http.post<Project>(\"/api/projects\", newProject);\r\n  }\r\n\r\n  assignContactToProject(projectId: number, contactId: number):Observable<void> {\r\n    return this._http.get<void>(\"/api/ProjectContacts?projectId=\"+projectId+\"&contactId=\"+contactId);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}